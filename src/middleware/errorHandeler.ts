import { NextFunction, Request, Response } from "express";
import mongoose from "mongoose";
import { ApiError } from "../errors/apiError";
// ‡∂∏‡∑ô‡∂∫ Express middleware ‡∂ë‡∂ö‡∂ö‡∑ä.
//     ‡∂î‡∂∫‡∑è‡∂Ω‡∂ß error ‡∂ë‡∂ö‡∂ö‡∑ä throw ‡∂ã‡∂±‡∑Ñ‡∂∏ ‡∑Ñ‡∑ù next(error) ‡∂ö‡∂Ω‡∑Ñ‡∂∏ ‡∂∏‡∑ô‡∂∫‡∂ß ‡∂ë‡∂∫‡∑í.
export const ErrorHandler = (
    error: any,
    req: Request,
    res: Response,
    next: NextFunction
) => {
    // üìå ‡∂∏‡∑ö‡∂ö‡∑ô‡∂±‡∑ä ‡∂∂‡∂Ω‡∂±‡∑ä‡∂±‡∑ö: response ‡∂ë‡∂ö ‡∂∏‡∑ö ‡∑Ä‡∂±‡∑Ä‡∑í‡∂ß‡∂∏ client ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑ê‡∑Ä‡∂Ω‡∑è‡∂Ø ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è.
    // ‡∂ë‡∑Ñ‡∑ô‡∂∏ ‡∂±‡∂∏‡∑ä error ‡∂ë‡∂ö next() ‡∂ö‡∂ª‡∂Ω‡∑è Express default handler ‡∂ë‡∂ö‡∂ß ‡∂∫‡∑Ä‡∂∫‡∑í.
    if (res.headersSent) {
        return next(error);
    }

    // üß™ Mongoose schema ‡∂ë‡∂ö‡∂ö required, match ‡∑Ä‡∂ú‡∑ö validations fail ‡∂ã‡∂±‡∑Ñ‡∂∏
    // ‡∂∏‡∑ö‡∂ö‡∑ô‡∂±‡∑ä ‡∂ë‡∂± error messages ‡∂Ω‡∑í‡∑É‡∑ä‡∂ß‡∑ä ‡∂ë‡∂ö‡∂ö‡∑ä client ‡∂ë‡∂ö‡∂ß ‡∂Ø‡∑ô‡∂∫‡∑í
    if (error instanceof mongoose.Error.ValidationError) {
        const errors = Object.values(error.errors).map((err: any) => err.message);
        return res.status(400).json({ message: "Validation failed", errors });
    }

    // üîçMongoDB ObjectId ‡∂ë‡∂ö‡∂ö‡∑ä invalid ‡∂±‡∂∏‡∑ä (‡∂ã‡∂Ø‡∑è: /api/books/invalid123)
    if (error instanceof mongoose.Error.CastError) {
        return res.status(400).json({
            message: `Invalid ${error.path}: ${error.value}`
        });
    }

    // ‡∑Ä‡∑ô‡∂±‡∂≠‡∑ä Mongoose-related error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂ã‡∂±‡∑ú‡∂≠‡∑ä ‡∂∏‡∑ô‡∂∫ capture ‡∂ö‡∂ª‡∂∫‡∑í (e.g., DisconnectedError)
    if (error instanceof mongoose.Error) {
        return res.status(400).json({ message: error.message });
    }

    // ‡∂î‡∂∂‡∂ú‡∑ö custom error class ‡∂ë‡∂ö‡∂ö‡∑ä ApiError ‡∂±‡∂∏‡∑ä,
    // ‡∂ë‡∂ö use ‡∂ö‡∂ª‡∂Ω‡∑è status ‡∑É‡∑Ñ message return ‡∂ö‡∂ª‡∂±‡∑Ä‡∑è.
    if (error instanceof ApiError) {
        return res.status(error.status).json({ message: error.message });
    }

    //  ‡∂∏‡∑ô‡∂∫ final fallback ‡∂ë‡∂ö.
    // ‡∂Ö‡∂±‡∑è‡∑Ä‡∂ª‡∂´‡∂∫ ‡∂±‡∑ú‡∑Ä‡∑ñ (unexpected) error ‡∂ë‡∂ö‡∂ö‡∑ä ‡∂±‡∂∏‡∑ä:
    // Console ‡∂ë‡∂ö‡∂ß error ‡∂ë‡∂ö print ‡∂ö‡∂ª‡∂∫‡∑í
    // Client ‡∂ë‡∂ö‡∂ß 500 Internal Server Error ‡∂ö‡∑í‡∂∫‡∂Ω‡∑è ‡∂Ø‡∑ô‡∂±‡∑Ä‡∑è
    console.error("üî• Unhandled Error:", error);
    res.status(500).json({ message: "Internal server error" });
};

